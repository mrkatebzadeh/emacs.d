* ggtags mode
#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :ensure t
  :config 
  (add-hook 'c-mode-common-hook
  (lambda ()
  (when (derived-mode-p 'c-mode 'c++-mode)
  (ggtags-mode 1)))))
#+END_SRC
* irony
#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure t
  :config
  (progn
  (unless (irony--find-server-executable) (call-interactively #'irony-install-server))
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (setq-default irony-cdb-compilation-databases '(irony-cdb-libclang
  irony-cdb-clang-complete))
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  ))
#+END_SRC
* company-irony
#+BEGIN_SRC emacs-lisp
(use-package company-irony
  :ensure t
  :config
  (progn
  (eval-after-load 'company '(add-to-list 'company-backends 'company-irony))))
#+END_SRC
* flycheck-irony
#+BEGIN_SRC emacs-lisp
(use-package flycheck-irony
  :ensure t
  :config
  (progn
  (eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))))
#+END_SRC
* irony-eldoc
#+BEGIN_SRC emacs-lisp
(use-package irony-eldoc
  :ensure t
  :config
  (progn
  (add-hook 'irony-mode-hook #'irony-eldoc)))
#+END_SRC
* google coding style for C/C++
#+BEGIN_SRC emacs-lisp
(use-package google-c-style
  :ensure t
  :config
  (progn
  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)))
#+END_SRC
* rtags
#+BEGIN_SRC emacs-lisp
(use-package rtags
  :ensure t
  :config
  (progn
  (unless (rtags-executable-find "rc") (error "Binary rc is not installed!"))
  (unless (rtags-executable-find "rdm") (error "Binary rdm is not installed!"))
  (define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
  (define-key c-mode-base-map (kbd "M-,") 'rtags-find-references-at-point)
  (define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
  (rtags-enable-standard-keybindings)
  (setq rtags-use-helm t)
  (add-hook 'kill-emacs-hook 'rtags-quit-rdm)
  ))
#+END_SRC
* helm-rtags
#+BEGIN_SRC emacs-lisp
(use-package helm-rtags
  :ensure t
  :config
  (progn
  (setq rtags-display-result-backend 'helm)
  ))
#+END_SRC
* company-rtags
#+BEGIN_SRC emacs-lisp
(use-package company-rtags
  :ensure t
  :config
  (progn
  (setq rtags-autostart-diagnostics t)
  (rtags-diagnostics)
  (setq rtags-completions-enabled t)
  (push 'company-rtags company-backends)
  ))
#+END_SRC
* flycheck-rtags
#+BEGIN_SRC emacs-lisp
(use-package flycheck-rtags
   :ensure t
   :config
   (progn
   (defun setup-flycheck-rtags ()
   (flycheck-select-checker 'rtags)
   (setq-local flycheck-highlighting-mode nil)
   (setq-local flycheck-check-syntax-automatically nil)
   (rtags-set-periodic-reparse-timeout 2.0)
   )
   (add-hook 'c-mode-hook #'setup-flycheck-rtags)
   (add-hook 'c++-mode-hook #'setup-flycheck-rtags)
   ))
   (add-hook 'find-file-hook 'rtags-start-process-maybe)
#+END_SRC
