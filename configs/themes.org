* menubar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
* welcome screen
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t)
(use-package dashboard
  :ensure t
  :config
  (progn
  (setq dashboard-banner-logo-title "[-< True happiness can be found when two contrary powers cooperate together >-]")
  (setq dashboard-startup-banner "~/.emacs.d/configs/logo.png")
  (setq dashboard-items '((recents  . 7)
                          (projects . 5)
                          (agenda . 5)
                          (bookmarks . 10)))
  (dashboard-setup-startup-hook)))
#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (progn
    (load-theme 'dracula t)))
#+END_SRC
* spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t)
(use-package spaceline-all-the-icons
  :ensure t
  :after spaceline
  :config
  (progn
   (spaceline-all-the-icons-theme)
   (setq spaceline-all-the-icons-separator-type 'cup)))
#+END_SRC
* highlight-line mode
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
* beacon mode
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config
  (progn
  (setq beacon-blink-when-window-changes t)
  (setq beacon-blink-when-window-scrolls nil)
  (setq beacon-blink-when-point-moves nil)
  (setq beacon-blink-duration .2)
  (setq beacon-blink-delay .2)
  (setq beacon-size 20)
  (beacon-mode 1)))
#+END_SRC
* parentheses
** highlight matches
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
** auto-pair
#+BEGIN_SRC emacs-lisp
(use-package autopair
  :ensure t
  :config
  (autopair-global-mode))
#+END_SRC
** rainbow mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (progn
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  ))
#+END_SRC
* scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
* transparency
#+BEGIN_SRC emacs-lisp
(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(85 . 50) '(100 . 100)))))
#+END_SRC
